{
	"id": "83b5b193e23a2ac14252f3c3de84510b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Ep4/example.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7.0;\r\n\r\ncontract Example {\r\n    function etherUnitExample() public pure {\r\n\r\n        // wei是貨幣中的最小單位\r\n        assert(1 wei == 2);\r\n\r\n        // 1 gwei is equal to 10^9 wei\r\n        assert(1 gwei == 1e9);\r\n\r\n        // 1 ether is equal to 10^18 wei\r\n        assert(1 ether == 1e18);\r\n    }\r\n\r\n    function timeUnitExample() public pure {\r\n        // 1秒\r\n        assert(1 seconds == 1);\r\n\r\n        // 1分鐘 = 60秒\r\n        assert(1 minutes == 60 seconds);\r\n\r\n        // 1小時 = 60分鐘\r\n        assert(1 hours == 60 minutes);\r\n\r\n        // 1天=24小時\r\n        assert(1 days == 24 hours);\r\n\r\n        // 1周 = 7天\r\n        assert(1 weeks == 7 days);\r\n    }\r\n\r\n    function validate(uint start, uint secondsAfter) public view returns(bool) {\r\n        bool isValidated = false;\r\n\r\n\t\t/// 區塊的時間戳記至少在3秒以前, 才算有效。\r\n        /// 注意: 此為範例，真實合約請不要使用block.timestamp來進行檢驗，具有弱點風險。\r\n        if (block.timestamp >= start + secondsAfter * 3 seconds) {\r\n            isValidated = true;\r\n        }\r\n        \r\n        return isValidated;\r\n    }\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Ep4/example.sol": {
				"Example": {
					"abi": [
						{
							"inputs": [],
							"name": "etherUnitExample",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "timeUnitExample",
							"outputs": [],
							"stateMutability": "pure",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "start",
									"type": "uint256"
								},
								{
									"internalType": "uint256",
									"name": "secondsAfter",
									"type": "uint256"
								}
							],
							"name": "validate",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Ep4/example.sol\":62:1202  contract Example {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Ep4/example.sol\":62:1202  contract Example {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x19730b44\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x24475f4c\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x97e82183\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Ep4/example.sol\":745:1199  function validate(uint start, uint secondsAfter) public view returns(bool) {\r... */\n    tag_3:\n      tag_6\n      0x04\n      dup1\n      calldatasize\n      sub\n      dup2\n      add\n      swap1\n      tag_7\n      swap2\n      swap1\n      tag_8\n      jump\t// in\n    tag_7:\n      tag_9\n      jump\t// in\n    tag_6:\n      mload(0x40)\n      tag_10\n      swap2\n      swap1\n      tag_11\n      jump\t// in\n    tag_10:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"Ep4/example.sol\":368:737  function timeUnitExample() public pure {\r... */\n    tag_4:\n      tag_12\n      tag_13\n      jump\t// in\n    tag_12:\n      stop\n        /* \"Ep4/example.sol\":86:360  function etherUnitExample() public pure {\r... */\n    tag_5:\n      tag_14\n      tag_15\n      jump\t// in\n    tag_14:\n      stop\n        /* \"Ep4/example.sol\":745:1199  function validate(uint start, uint secondsAfter) public view returns(bool) {\r... */\n    tag_9:\n        /* \"Ep4/example.sol\":814:818  bool */\n      0x00\n        /* \"Ep4/example.sol\":831:847  bool isValidated */\n      dup1\n        /* \"Ep4/example.sol\":850:855  false */\n      0x00\n        /* \"Ep4/example.sol\":831:855  bool isValidated = false */\n      swap1\n      pop\n        /* \"Ep4/example.sol\":1097:1106  3 seconds */\n      0x03\n        /* \"Ep4/example.sol\":1082:1094  secondsAfter */\n      dup4\n        /* \"Ep4/example.sol\":1082:1106  secondsAfter * 3 seconds */\n      tag_17\n      swap2\n      swap1\n      tag_18\n      jump\t// in\n    tag_17:\n        /* \"Ep4/example.sol\":1074:1079  start */\n      dup5\n        /* \"Ep4/example.sol\":1074:1106  start + secondsAfter * 3 seconds */\n      tag_19\n      swap2\n      swap1\n      tag_20\n      jump\t// in\n    tag_19:\n        /* \"Ep4/example.sol\":1055:1070  block.timestamp */\n      timestamp\n        /* \"Ep4/example.sol\":1055:1106  block.timestamp >= start + secondsAfter * 3 seconds */\n      lt\n        /* \"Ep4/example.sol\":1051:1153  if (block.timestamp >= start + secondsAfter * 3 seconds) {\r... */\n      tag_21\n      jumpi\n        /* \"Ep4/example.sol\":1137:1141  true */\n      0x01\n        /* \"Ep4/example.sol\":1123:1141  isValidated = true */\n      swap1\n      pop\n        /* \"Ep4/example.sol\":1051:1153  if (block.timestamp >= start + secondsAfter * 3 seconds) {\r... */\n    tag_21:\n        /* \"Ep4/example.sol\":1180:1191  isValidated */\n      dup1\n        /* \"Ep4/example.sol\":1173:1191  return isValidated */\n      swap2\n      pop\n      pop\n        /* \"Ep4/example.sol\":745:1199  function validate(uint start, uint secondsAfter) public view returns(bool) {\r... */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"Ep4/example.sol\":368:737  function timeUnitExample() public pure {\r... */\n    tag_13:\n        /* \"Ep4/example.sol\":455:456  1 */\n      0x01\n        /* \"Ep4/example.sol\":442:451  1 seconds */\n      dup1\n        /* \"Ep4/example.sol\":442:456  1 seconds == 1 */\n      eq\n        /* \"Ep4/example.sol\":435:457  assert(1 seconds == 1) */\n      tag_23\n      jumpi\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n    tag_23:\n        /* \"Ep4/example.sol\":518:528  60 seconds */\n      0x3c\n        /* \"Ep4/example.sol\":505:514  1 minutes */\n      dup1\n        /* \"Ep4/example.sol\":505:528  1 minutes == 60 seconds */\n      eq\n        /* \"Ep4/example.sol\":498:529  assert(1 minutes == 60 seconds) */\n      tag_26\n      jumpi\n      tag_27\n      tag_25\n      jump\t// in\n    tag_27:\n    tag_26:\n        /* \"Ep4/example.sol\":591:601  60 minutes */\n      0x0e10\n        /* \"Ep4/example.sol\":580:587  1 hours */\n      dup1\n        /* \"Ep4/example.sol\":580:601  1 hours == 60 minutes */\n      eq\n        /* \"Ep4/example.sol\":573:602  assert(1 hours == 60 minutes) */\n      tag_28\n      jumpi\n      tag_29\n      tag_25\n      jump\t// in\n    tag_29:\n    tag_28:\n        /* \"Ep4/example.sol\":658:666  24 hours */\n      0x015180\n        /* \"Ep4/example.sol\":648:654  1 days */\n      dup1\n        /* \"Ep4/example.sol\":648:666  1 days == 24 hours */\n      eq\n        /* \"Ep4/example.sol\":641:667  assert(1 days == 24 hours) */\n      tag_30\n      jumpi\n      tag_31\n      tag_25\n      jump\t// in\n    tag_31:\n    tag_30:\n        /* \"Ep4/example.sol\":722:728  7 days */\n      0x093a80\n        /* \"Ep4/example.sol\":711:718  1 weeks */\n      dup1\n        /* \"Ep4/example.sol\":711:728  1 weeks == 7 days */\n      eq\n        /* \"Ep4/example.sol\":704:729  assert(1 weeks == 7 days) */\n      tag_32\n      jumpi\n      tag_33\n      tag_25\n      jump\t// in\n    tag_33:\n    tag_32:\n        /* \"Ep4/example.sol\":368:737  function timeUnitExample() public pure {\r... */\n      jump\t// out\n        /* \"Ep4/example.sol\":86:360  function etherUnitExample() public pure {\r... */\n    tag_15:\n        /* \"Ep4/example.sol\":198:199  2 */\n      0x02\n        /* \"Ep4/example.sol\":189:194  1 wei */\n      0x01\n        /* \"Ep4/example.sol\":189:199  1 wei == 2 */\n      eq\n        /* \"Ep4/example.sol\":182:200  assert(1 wei == 2) */\n      tag_35\n      jumpi\n      tag_36\n      tag_25\n      jump\t// in\n    tag_36:\n    tag_35:\n        /* \"Ep4/example.sol\":270:273  1e9 */\n      0x3b9aca00\n        /* \"Ep4/example.sol\":260:266  1 gwei */\n      dup1\n        /* \"Ep4/example.sol\":260:273  1 gwei == 1e9 */\n      eq\n        /* \"Ep4/example.sol\":253:274  assert(1 gwei == 1e9) */\n      tag_37\n      jumpi\n      tag_38\n      tag_25\n      jump\t// in\n    tag_38:\n    tag_37:\n        /* \"Ep4/example.sol\":347:351  1e18 */\n      0x0de0b6b3a7640000\n        /* \"Ep4/example.sol\":336:343  1 ether */\n      dup1\n        /* \"Ep4/example.sol\":336:351  1 ether == 1e18 */\n      eq\n        /* \"Ep4/example.sol\":329:352  assert(1 ether == 1e18) */\n      tag_39\n      jumpi\n      tag_40\n      tag_25\n      jump\t// in\n    tag_40:\n    tag_39:\n        /* \"Ep4/example.sol\":86:360  function etherUnitExample() public pure {\r... */\n      jump\t// out\n        /* \"#utility.yul\":7:146   */\n    tag_42:\n        /* \"#utility.yul\":53:58   */\n      0x00\n        /* \"#utility.yul\":91:97   */\n      dup2\n        /* \"#utility.yul\":78:98   */\n      calldataload\n        /* \"#utility.yul\":69:98   */\n      swap1\n      pop\n        /* \"#utility.yul\":107:140   */\n      tag_44\n        /* \"#utility.yul\":134:139   */\n      dup2\n        /* \"#utility.yul\":107:140   */\n      tag_45\n      jump\t// in\n    tag_44:\n        /* \"#utility.yul\":7:146   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":152:626   */\n    tag_8:\n        /* \"#utility.yul\":220:226   */\n      0x00\n        /* \"#utility.yul\":228:234   */\n      dup1\n        /* \"#utility.yul\":277:279   */\n      0x40\n        /* \"#utility.yul\":265:274   */\n      dup4\n        /* \"#utility.yul\":256:263   */\n      dup6\n        /* \"#utility.yul\":252:275   */\n      sub\n        /* \"#utility.yul\":248:280   */\n      slt\n        /* \"#utility.yul\":245:364   */\n      iszero\n      tag_47\n      jumpi\n        /* \"#utility.yul\":283:362   */\n      tag_48\n      tag_49\n      jump\t// in\n    tag_48:\n        /* \"#utility.yul\":245:364   */\n    tag_47:\n        /* \"#utility.yul\":403:404   */\n      0x00\n        /* \"#utility.yul\":428:481   */\n      tag_50\n        /* \"#utility.yul\":473:480   */\n      dup6\n        /* \"#utility.yul\":464:470   */\n      dup3\n        /* \"#utility.yul\":453:462   */\n      dup7\n        /* \"#utility.yul\":449:471   */\n      add\n        /* \"#utility.yul\":428:481   */\n      tag_42\n      jump\t// in\n    tag_50:\n        /* \"#utility.yul\":418:481   */\n      swap3\n      pop\n        /* \"#utility.yul\":374:491   */\n      pop\n        /* \"#utility.yul\":530:532   */\n      0x20\n        /* \"#utility.yul\":556:609   */\n      tag_51\n        /* \"#utility.yul\":601:608   */\n      dup6\n        /* \"#utility.yul\":592:598   */\n      dup3\n        /* \"#utility.yul\":581:590   */\n      dup7\n        /* \"#utility.yul\":577:599   */\n      add\n        /* \"#utility.yul\":556:609   */\n      tag_42\n      jump\t// in\n    tag_51:\n        /* \"#utility.yul\":546:609   */\n      swap2\n      pop\n        /* \"#utility.yul\":501:619   */\n      pop\n        /* \"#utility.yul\":152:626   */\n      swap3\n      pop\n      swap3\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":632:741   */\n    tag_52:\n        /* \"#utility.yul\":713:734   */\n      tag_54\n        /* \"#utility.yul\":728:733   */\n      dup2\n        /* \"#utility.yul\":713:734   */\n      tag_55\n      jump\t// in\n    tag_54:\n        /* \"#utility.yul\":708:711   */\n      dup3\n        /* \"#utility.yul\":701:735   */\n      mstore\n        /* \"#utility.yul\":632:741   */\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":747:957   */\n    tag_11:\n        /* \"#utility.yul\":834:838   */\n      0x00\n        /* \"#utility.yul\":872:874   */\n      0x20\n        /* \"#utility.yul\":861:870   */\n      dup3\n        /* \"#utility.yul\":857:875   */\n      add\n        /* \"#utility.yul\":849:875   */\n      swap1\n      pop\n        /* \"#utility.yul\":885:950   */\n      tag_57\n        /* \"#utility.yul\":947:948   */\n      0x00\n        /* \"#utility.yul\":936:945   */\n      dup4\n        /* \"#utility.yul\":932:949   */\n      add\n        /* \"#utility.yul\":923:929   */\n      dup5\n        /* \"#utility.yul\":885:950   */\n      tag_52\n      jump\t// in\n    tag_57:\n        /* \"#utility.yul\":747:957   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1044:1349   */\n    tag_20:\n        /* \"#utility.yul\":1084:1087   */\n      0x00\n        /* \"#utility.yul\":1103:1123   */\n      tag_61\n        /* \"#utility.yul\":1121:1122   */\n      dup3\n        /* \"#utility.yul\":1103:1123   */\n      tag_62\n      jump\t// in\n    tag_61:\n        /* \"#utility.yul\":1098:1123   */\n      swap2\n      pop\n        /* \"#utility.yul\":1137:1157   */\n      tag_63\n        /* \"#utility.yul\":1155:1156   */\n      dup4\n        /* \"#utility.yul\":1137:1157   */\n      tag_62\n      jump\t// in\n    tag_63:\n        /* \"#utility.yul\":1132:1157   */\n      swap3\n      pop\n        /* \"#utility.yul\":1291:1292   */\n      dup3\n        /* \"#utility.yul\":1223:1289   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1219:1293   */\n      sub\n        /* \"#utility.yul\":1216:1217   */\n      dup3\n        /* \"#utility.yul\":1213:1294   */\n      gt\n        /* \"#utility.yul\":1210:1317   */\n      iszero\n      tag_64\n      jumpi\n        /* \"#utility.yul\":1297:1315   */\n      tag_65\n      tag_66\n      jump\t// in\n    tag_65:\n        /* \"#utility.yul\":1210:1317   */\n    tag_64:\n        /* \"#utility.yul\":1341:1342   */\n      dup3\n        /* \"#utility.yul\":1338:1339   */\n      dup3\n        /* \"#utility.yul\":1334:1343   */\n      add\n        /* \"#utility.yul\":1327:1343   */\n      swap1\n      pop\n        /* \"#utility.yul\":1044:1349   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1355:1703   */\n    tag_18:\n        /* \"#utility.yul\":1395:1402   */\n      0x00\n        /* \"#utility.yul\":1418:1438   */\n      tag_68\n        /* \"#utility.yul\":1436:1437   */\n      dup3\n        /* \"#utility.yul\":1418:1438   */\n      tag_62\n      jump\t// in\n    tag_68:\n        /* \"#utility.yul\":1413:1438   */\n      swap2\n      pop\n        /* \"#utility.yul\":1452:1472   */\n      tag_69\n        /* \"#utility.yul\":1470:1471   */\n      dup4\n        /* \"#utility.yul\":1452:1472   */\n      tag_62\n      jump\t// in\n    tag_69:\n        /* \"#utility.yul\":1447:1472   */\n      swap3\n      pop\n        /* \"#utility.yul\":1640:1641   */\n      dup2\n        /* \"#utility.yul\":1572:1638   */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\n        /* \"#utility.yul\":1568:1642   */\n      div\n        /* \"#utility.yul\":1565:1566   */\n      dup4\n        /* \"#utility.yul\":1562:1643   */\n      gt\n        /* \"#utility.yul\":1557:1558   */\n      dup3\n        /* \"#utility.yul\":1550:1559   */\n      iszero\n        /* \"#utility.yul\":1543:1560   */\n      iszero\n        /* \"#utility.yul\":1539:1644   */\n      and\n        /* \"#utility.yul\":1536:1667   */\n      iszero\n      tag_70\n      jumpi\n        /* \"#utility.yul\":1647:1665   */\n      tag_71\n      tag_66\n      jump\t// in\n    tag_71:\n        /* \"#utility.yul\":1536:1667   */\n    tag_70:\n        /* \"#utility.yul\":1695:1696   */\n      dup3\n        /* \"#utility.yul\":1692:1693   */\n      dup3\n        /* \"#utility.yul\":1688:1697   */\n      mul\n        /* \"#utility.yul\":1677:1697   */\n      swap1\n      pop\n        /* \"#utility.yul\":1355:1703   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1709:1799   */\n    tag_55:\n        /* \"#utility.yul\":1743:1750   */\n      0x00\n        /* \"#utility.yul\":1786:1791   */\n      dup2\n        /* \"#utility.yul\":1779:1792   */\n      iszero\n        /* \"#utility.yul\":1772:1793   */\n      iszero\n        /* \"#utility.yul\":1761:1793   */\n      swap1\n      pop\n        /* \"#utility.yul\":1709:1799   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1805:1882   */\n    tag_62:\n        /* \"#utility.yul\":1842:1849   */\n      0x00\n        /* \"#utility.yul\":1871:1876   */\n      dup2\n        /* \"#utility.yul\":1860:1876   */\n      swap1\n      pop\n        /* \"#utility.yul\":1805:1882   */\n      swap2\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1888:2068   */\n    tag_25:\n        /* \"#utility.yul\":1936:2013   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":1933:1934   */\n      0x00\n        /* \"#utility.yul\":1926:2014   */\n      mstore\n        /* \"#utility.yul\":2033:2037   */\n      0x01\n        /* \"#utility.yul\":2030:2031   */\n      0x04\n        /* \"#utility.yul\":2023:2038   */\n      mstore\n        /* \"#utility.yul\":2057:2061   */\n      0x24\n        /* \"#utility.yul\":2054:2055   */\n      0x00\n        /* \"#utility.yul\":2047:2062   */\n      revert\n        /* \"#utility.yul\":2074:2254   */\n    tag_66:\n        /* \"#utility.yul\":2122:2199   */\n      0x4e487b7100000000000000000000000000000000000000000000000000000000\n        /* \"#utility.yul\":2119:2120   */\n      0x00\n        /* \"#utility.yul\":2112:2200   */\n      mstore\n        /* \"#utility.yul\":2219:2223   */\n      0x11\n        /* \"#utility.yul\":2216:2217   */\n      0x04\n        /* \"#utility.yul\":2209:2224   */\n      mstore\n        /* \"#utility.yul\":2243:2247   */\n      0x24\n        /* \"#utility.yul\":2240:2241   */\n      0x00\n        /* \"#utility.yul\":2233:2248   */\n      revert\n        /* \"#utility.yul\":2383:2500   */\n    tag_49:\n        /* \"#utility.yul\":2492:2493   */\n      0x00\n        /* \"#utility.yul\":2489:2490   */\n      dup1\n        /* \"#utility.yul\":2482:2494   */\n      revert\n        /* \"#utility.yul\":2506:2628   */\n    tag_45:\n        /* \"#utility.yul\":2579:2603   */\n      tag_80\n        /* \"#utility.yul\":2597:2602   */\n      dup2\n        /* \"#utility.yul\":2579:2603   */\n      tag_62\n      jump\t// in\n    tag_80:\n        /* \"#utility.yul\":2572:2577   */\n      dup2\n        /* \"#utility.yul\":2569:2604   */\n      eq\n        /* \"#utility.yul\":2559:2622   */\n      tag_81\n      jumpi\n        /* \"#utility.yul\":2618:2619   */\n      0x00\n        /* \"#utility.yul\":2615:2616   */\n      dup1\n        /* \"#utility.yul\":2608:2620   */\n      revert\n        /* \"#utility.yul\":2559:2622   */\n    tag_81:\n        /* \"#utility.yul\":2506:2628   */\n      pop\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220b74a70ac6f78f026e8b665b8aa24bf198c37d53dc5d0896705fa84e7e87a02b564736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5061034f806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806319730b441461004657806324475f4c1461007657806397e8218314610080575b600080fd5b610060600480360381019061005b919061016f565b61008a565b60405161006d91906101be565b60405180910390f35b61007e6100be565b005b61008861011a565b005b6000806000905060038361009e919061022f565b846100a991906101d9565b42106100b457600190505b8091505092915050565b600180146100cf576100ce61029f565b5b603c80146100e0576100df61029f565b5b610e1080146100f2576100f161029f565b5b6201518080146101055761010461029f565b5b62093a8080146101185761011761029f565b5b565b600260011461012c5761012b61029f565b5b633b9aca0080146101405761013f61029f565b5b670de0b6b3a764000080146101585761015761029f565b5b565b60008135905061016981610302565b92915050565b60008060408385031215610186576101856102fd565b5b60006101948582860161015a565b92505060206101a58582860161015a565b9150509250929050565b6101b881610289565b82525050565b60006020820190506101d360008301846101af565b92915050565b60006101e482610295565b91506101ef83610295565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610224576102236102ce565b5b828201905092915050565b600061023a82610295565b915061024583610295565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561027e5761027d6102ce565b5b828202905092915050565b60008115159050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61030b81610295565b811461031657600080fd5b5056fea2646970667358221220b74a70ac6f78f026e8b665b8aa24bf198c37d53dc5d0896705fa84e7e87a02b564736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x34F DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x19730B44 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x24475F4C EQ PUSH2 0x76 JUMPI DUP1 PUSH4 0x97E82183 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x16F JUMP JUMPDEST PUSH2 0x8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D SWAP2 SWAP1 PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH2 0xBE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x88 PUSH2 0x11A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x3 DUP4 PUSH2 0x9E SWAP2 SWAP1 PUSH2 0x22F JUMP JUMPDEST DUP5 PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1D9 JUMP JUMPDEST TIMESTAMP LT PUSH2 0xB4 JUMPI PUSH1 0x1 SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xCF JUMPI PUSH2 0xCE PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0xE0 JUMPI PUSH2 0xDF PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH2 0xE10 DUP1 EQ PUSH2 0xF2 JUMPI PUSH2 0xF1 PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x105 JUMPI PUSH2 0x104 PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x118 JUMPI PUSH2 0x117 PUSH2 0x29F JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 EQ PUSH2 0x12C JUMPI PUSH2 0x12B PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH2 0x140 JUMPI PUSH2 0x13F PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0x158 JUMPI PUSH2 0x157 PUSH2 0x29F JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169 DUP2 PUSH2 0x302 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186 JUMPI PUSH2 0x185 PUSH2 0x2FD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194 DUP6 DUP3 DUP7 ADD PUSH2 0x15A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A5 DUP6 DUP3 DUP7 ADD PUSH2 0x15A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B8 DUP2 PUSH2 0x289 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E4 DUP3 PUSH2 0x295 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF DUP4 PUSH2 0x295 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x224 JUMPI PUSH2 0x223 PUSH2 0x2CE JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A DUP3 PUSH2 0x295 JUMP JUMPDEST SWAP2 POP PUSH2 0x245 DUP4 PUSH2 0x295 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x27E JUMPI PUSH2 0x27D PUSH2 0x2CE JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30B DUP2 PUSH2 0x295 JUMP JUMPDEST DUP2 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4A PUSH17 0xAC6F78F026E8B665B8AA24BF198C37D53D 0xC5 0xD0 DUP10 PUSH8 0x5FA84E7E87A02B5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "62:1140:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@etherUnitExample_23": {
									"entryPoint": 282,
									"id": 23,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@timeUnitExample_57": {
									"entryPoint": 190,
									"id": 57,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@validate_87": {
									"entryPoint": 138,
									"id": 87,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_t_uint256": {
									"entryPoint": 346,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256t_uint256": {
									"entryPoint": 367,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 2
								},
								"abi_encode_t_bool_to_t_bool_fromStack": {
									"entryPoint": 431,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 0
								},
								"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed": {
									"entryPoint": 446,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"allocate_unbounded": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"checked_add_t_uint256": {
									"entryPoint": 473,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"checked_mul_t_uint256": {
									"entryPoint": 559,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"cleanup_t_bool": {
									"entryPoint": 649,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"cleanup_t_uint256": {
									"entryPoint": 661,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x01": {
									"entryPoint": 671,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x11": {
									"entryPoint": 718,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b": {
									"entryPoint": 765,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"validator_revert_t_uint256": {
									"entryPoint": 770,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2631:1",
										"statements": [
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "59:87:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "69:29:1",
															"value": {
																"arguments": [
																	{
																		"name": "offset",
																		"nodeType": "YulIdentifier",
																		"src": "91:6:1"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "78:12:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "78:20:1"
															},
															"variableNames": [
																{
																	"name": "value",
																	"nodeType": "YulIdentifier",
																	"src": "69:5:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "134:5:1"
																	}
																],
																"functionName": {
																	"name": "validator_revert_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "107:26:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "107:33:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "107:33:1"
														}
													]
												},
												"name": "abi_decode_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "offset",
														"nodeType": "YulTypedName",
														"src": "37:6:1",
														"type": ""
													},
													{
														"name": "end",
														"nodeType": "YulTypedName",
														"src": "45:3:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "53:5:1",
														"type": ""
													}
												],
												"src": "7:139:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "235:391:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "281:83:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
																				"nodeType": "YulIdentifier",
																				"src": "283:77:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "283:79:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "283:79:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "256:7:1"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "265:9:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "252:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "252:23:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "277:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "248:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "248:32:1"
															},
															"nodeType": "YulIf",
															"src": "245:119:1"
														},
														{
															"nodeType": "YulBlock",
															"src": "374:117:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "389:15:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "403:1:1",
																		"type": "",
																		"value": "0"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "393:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "418:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "453:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "464:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "449:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "449:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "473:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "428:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "428:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value0",
																			"nodeType": "YulIdentifier",
																			"src": "418:6:1"
																		}
																	]
																}
															]
														},
														{
															"nodeType": "YulBlock",
															"src": "501:118:1",
															"statements": [
																{
																	"nodeType": "YulVariableDeclaration",
																	"src": "516:16:1",
																	"value": {
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "530:2:1",
																		"type": "",
																		"value": "32"
																	},
																	"variables": [
																		{
																			"name": "offset",
																			"nodeType": "YulTypedName",
																			"src": "520:6:1",
																			"type": ""
																		}
																	]
																},
																{
																	"nodeType": "YulAssignment",
																	"src": "546:63:1",
																	"value": {
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "headStart",
																						"nodeType": "YulIdentifier",
																						"src": "581:9:1"
																					},
																					{
																						"name": "offset",
																						"nodeType": "YulIdentifier",
																						"src": "592:6:1"
																					}
																				],
																				"functionName": {
																					"name": "add",
																					"nodeType": "YulIdentifier",
																					"src": "577:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "577:22:1"
																			},
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "601:7:1"
																			}
																		],
																		"functionName": {
																			"name": "abi_decode_t_uint256",
																			"nodeType": "YulIdentifier",
																			"src": "556:20:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "556:53:1"
																	},
																	"variableNames": [
																		{
																			"name": "value1",
																			"nodeType": "YulIdentifier",
																			"src": "546:6:1"
																		}
																	]
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "197:9:1",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "208:7:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "220:6:1",
														"type": ""
													},
													{
														"name": "value1",
														"nodeType": "YulTypedName",
														"src": "228:6:1",
														"type": ""
													}
												],
												"src": "152:474:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "691:50:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "pos",
																		"nodeType": "YulIdentifier",
																		"src": "708:3:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "728:5:1"
																			}
																		],
																		"functionName": {
																			"name": "cleanup_t_bool",
																			"nodeType": "YulIdentifier",
																			"src": "713:14:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "713:21:1"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "701:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "701:34:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "701:34:1"
														}
													]
												},
												"name": "abi_encode_t_bool_to_t_bool_fromStack",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "679:5:1",
														"type": ""
													},
													{
														"name": "pos",
														"nodeType": "YulTypedName",
														"src": "686:3:1",
														"type": ""
													}
												],
												"src": "632:109:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "839:118:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "849:26:1",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "861:9:1"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "872:2:1",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "857:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "857:18:1"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "849:4:1"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "923:6:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "936:9:1"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "947:1:1",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "932:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "932:17:1"
																	}
																],
																"functionName": {
																	"name": "abi_encode_t_bool_to_t_bool_fromStack",
																	"nodeType": "YulIdentifier",
																	"src": "885:37:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "885:65:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "885:65:1"
														}
													]
												},
												"name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "811:9:1",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "823:6:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "834:4:1",
														"type": ""
													}
												],
												"src": "747:210:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1003:35:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1013:19:1",
															"value": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1029:2:1",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "1023:5:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1023:9:1"
															},
															"variableNames": [
																{
																	"name": "memPtr",
																	"nodeType": "YulIdentifier",
																	"src": "1013:6:1"
																}
															]
														}
													]
												},
												"name": "allocate_unbounded",
												"nodeType": "YulFunctionDefinition",
												"returnVariables": [
													{
														"name": "memPtr",
														"nodeType": "YulTypedName",
														"src": "996:6:1",
														"type": ""
													}
												],
												"src": "963:75:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1088:261:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1098:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1121:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1103:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1103:20:1"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "1098:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1132:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1155:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1137:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1137:20:1"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "1132:1:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1295:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1297:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1297:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1297:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1216:1:1"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1223:66:1",
																				"type": "",
																				"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																			},
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1291:1:1"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1219:3:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1219:74:1"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1213:2:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1213:81:1"
															},
															"nodeType": "YulIf",
															"src": "1210:107:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1327:16:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1338:1:1"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1341:1:1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1334:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1334:9:1"
															},
															"variableNames": [
																{
																	"name": "sum",
																	"nodeType": "YulIdentifier",
																	"src": "1327:3:1"
																}
															]
														}
													]
												},
												"name": "checked_add_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1075:1:1",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1078:1:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "sum",
														"nodeType": "YulTypedName",
														"src": "1084:3:1",
														"type": ""
													}
												],
												"src": "1044:305:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1403:300:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1413:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1436:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1418:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1418:20:1"
															},
															"variableNames": [
																{
																	"name": "x",
																	"nodeType": "YulIdentifier",
																	"src": "1413:1:1"
																}
															]
														},
														{
															"nodeType": "YulAssignment",
															"src": "1447:25:1",
															"value": {
																"arguments": [
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1470:1:1"
																	}
																],
																"functionName": {
																	"name": "cleanup_t_uint256",
																	"nodeType": "YulIdentifier",
																	"src": "1452:17:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1452:20:1"
															},
															"variableNames": [
																{
																	"name": "y",
																	"nodeType": "YulIdentifier",
																	"src": "1447:1:1"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1645:22:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1647:16:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1647:18:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1647:18:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"arguments": [
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1557:1:1"
																					}
																				],
																				"functionName": {
																					"name": "iszero",
																					"nodeType": "YulIdentifier",
																					"src": "1550:6:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1550:9:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1543:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1543:17:1"
																	},
																	{
																		"arguments": [
																			{
																				"name": "y",
																				"nodeType": "YulIdentifier",
																				"src": "1565:1:1"
																			},
																			{
																				"arguments": [
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "1572:66:1",
																						"type": "",
																						"value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
																					},
																					{
																						"name": "x",
																						"nodeType": "YulIdentifier",
																						"src": "1640:1:1"
																					}
																				],
																				"functionName": {
																					"name": "div",
																					"nodeType": "YulIdentifier",
																					"src": "1568:3:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1568:74:1"
																			}
																		],
																		"functionName": {
																			"name": "gt",
																			"nodeType": "YulIdentifier",
																			"src": "1562:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1562:81:1"
																	}
																],
																"functionName": {
																	"name": "and",
																	"nodeType": "YulIdentifier",
																	"src": "1539:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1539:105:1"
															},
															"nodeType": "YulIf",
															"src": "1536:131:1"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1677:20:1",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1692:1:1"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1695:1:1"
																	}
																],
																"functionName": {
																	"name": "mul",
																	"nodeType": "YulIdentifier",
																	"src": "1688:3:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1688:9:1"
															},
															"variableNames": [
																{
																	"name": "product",
																	"nodeType": "YulIdentifier",
																	"src": "1677:7:1"
																}
															]
														}
													]
												},
												"name": "checked_mul_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1386:1:1",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1389:1:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "product",
														"nodeType": "YulTypedName",
														"src": "1395:7:1",
														"type": ""
													}
												],
												"src": "1355:348:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1751:48:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1761:32:1",
															"value": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1786:5:1"
																			}
																		],
																		"functionName": {
																			"name": "iszero",
																			"nodeType": "YulIdentifier",
																			"src": "1779:6:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1779:13:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1772:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1772:21:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1761:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_bool",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1733:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1743:7:1",
														"type": ""
													}
												],
												"src": "1709:90:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1850:32:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1860:16:1",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1871:5:1"
															},
															"variableNames": [
																{
																	"name": "cleaned",
																	"nodeType": "YulIdentifier",
																	"src": "1860:7:1"
																}
															]
														}
													]
												},
												"name": "cleanup_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1832:5:1",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "cleaned",
														"nodeType": "YulTypedName",
														"src": "1842:7:1",
														"type": ""
													}
												],
												"src": "1805:77:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1916:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1933:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1936:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1926:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "1926:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1926:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2030:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2033:4:1",
																		"type": "",
																		"value": "0x01"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2023:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2023:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2023:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2054:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2057:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2047:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2047:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2047:15:1"
														}
													]
												},
												"name": "panic_error_0x01",
												"nodeType": "YulFunctionDefinition",
												"src": "1888:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2102:152:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2119:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2122:77:1",
																		"type": "",
																		"value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2112:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2112:88:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2112:88:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2216:1:1",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2219:4:1",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2209:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2209:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2209:15:1"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2240:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2243:4:1",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2233:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2233:15:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2233:15:1"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "2074:180:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2349:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2366:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2369:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2359:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2359:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2359:12:1"
														}
													]
												},
												"name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
												"nodeType": "YulFunctionDefinition",
												"src": "2260:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2472:28:1",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2489:1:1",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2492:1:1",
																		"type": "",
																		"value": "0"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "2482:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2482:12:1"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2482:12:1"
														}
													]
												},
												"name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
												"nodeType": "YulFunctionDefinition",
												"src": "2383:117:1"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2549:79:1",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "2606:16:1",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2615:1:1",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "2618:1:1",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "2608:6:1"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "2608:12:1"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "2608:12:1"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "2572:5:1"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "2597:5:1"
																					}
																				],
																				"functionName": {
																					"name": "cleanup_t_uint256",
																					"nodeType": "YulIdentifier",
																					"src": "2579:17:1"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "2579:24:1"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "2569:2:1"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2569:35:1"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "2562:6:1"
																},
																"nodeType": "YulFunctionCall",
																"src": "2562:43:1"
															},
															"nodeType": "YulIf",
															"src": "2559:63:1"
														}
													]
												},
												"name": "validator_revert_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "2542:5:1",
														"type": ""
													}
												],
												"src": "2506:122:1"
											}
										]
									},
									"contents": "{\n\n    function abi_decode_t_uint256(offset, end) -> value {\n        value := calldataload(offset)\n        validator_revert_t_uint256(value)\n    }\n\n    function abi_decode_tuple_t_uint256t_uint256(headStart, dataEnd) -> value0, value1 {\n        if slt(sub(dataEnd, headStart), 64) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n        {\n\n            let offset := 32\n\n            value1 := abi_decode_t_uint256(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function abi_encode_t_bool_to_t_bool_fromStack(value, pos) {\n        mstore(pos, cleanup_t_bool(value))\n    }\n\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_bool_to_t_bool_fromStack(value0,  add(headStart, 0))\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function checked_add_t_uint256(x, y) -> sum {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x > (maxValue - y)\n        if gt(x, sub(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, y)) { panic_error_0x11() }\n\n        sum := add(x, y)\n    }\n\n    function checked_mul_t_uint256(x, y) -> product {\n        x := cleanup_t_uint256(x)\n        y := cleanup_t_uint256(y)\n\n        // overflow, if x != 0 and y > (maxValue / x)\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n\n        product := mul(x, y)\n    }\n\n    function cleanup_t_bool(value) -> cleaned {\n        cleaned := iszero(iszero(value))\n    }\n\n    function cleanup_t_uint256(value) -> cleaned {\n        cleaned := value\n    }\n\n    function panic_error_0x01() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x01)\n        revert(0, 0x24)\n    }\n\n    function panic_error_0x11() {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_uint256(value) {\n        if iszero(eq(value, cleanup_t_uint256(value))) { revert(0, 0) }\n    }\n\n}\n",
									"id": 1,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50600436106100415760003560e01c806319730b441461004657806324475f4c1461007657806397e8218314610080575b600080fd5b610060600480360381019061005b919061016f565b61008a565b60405161006d91906101be565b60405180910390f35b61007e6100be565b005b61008861011a565b005b6000806000905060038361009e919061022f565b846100a991906101d9565b42106100b457600190505b8091505092915050565b600180146100cf576100ce61029f565b5b603c80146100e0576100df61029f565b5b610e1080146100f2576100f161029f565b5b6201518080146101055761010461029f565b5b62093a8080146101185761011761029f565b5b565b600260011461012c5761012b61029f565b5b633b9aca0080146101405761013f61029f565b5b670de0b6b3a764000080146101585761015761029f565b5b565b60008135905061016981610302565b92915050565b60008060408385031215610186576101856102fd565b5b60006101948582860161015a565b92505060206101a58582860161015a565b9150509250929050565b6101b881610289565b82525050565b60006020820190506101d360008301846101af565b92915050565b60006101e482610295565b91506101ef83610295565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610224576102236102ce565b5b828201905092915050565b600061023a82610295565b915061024583610295565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561027e5761027d6102ce565b5b828202905092915050565b60008115159050919050565b6000819050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052600160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600080fd5b61030b81610295565b811461031657600080fd5b5056fea2646970667358221220b74a70ac6f78f026e8b665b8aa24bf198c37d53dc5d0896705fa84e7e87a02b564736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x41 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x19730B44 EQ PUSH2 0x46 JUMPI DUP1 PUSH4 0x24475F4C EQ PUSH2 0x76 JUMPI DUP1 PUSH4 0x97E82183 EQ PUSH2 0x80 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x60 PUSH1 0x4 DUP1 CALLDATASIZE SUB DUP2 ADD SWAP1 PUSH2 0x5B SWAP2 SWAP1 PUSH2 0x16F JUMP JUMPDEST PUSH2 0x8A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x6D SWAP2 SWAP1 PUSH2 0x1BE JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x7E PUSH2 0xBE JUMP JUMPDEST STOP JUMPDEST PUSH2 0x88 PUSH2 0x11A JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 POP PUSH1 0x3 DUP4 PUSH2 0x9E SWAP2 SWAP1 PUSH2 0x22F JUMP JUMPDEST DUP5 PUSH2 0xA9 SWAP2 SWAP1 PUSH2 0x1D9 JUMP JUMPDEST TIMESTAMP LT PUSH2 0xB4 JUMPI PUSH1 0x1 SWAP1 POP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 DUP1 EQ PUSH2 0xCF JUMPI PUSH2 0xCE PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH1 0x3C DUP1 EQ PUSH2 0xE0 JUMPI PUSH2 0xDF PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH2 0xE10 DUP1 EQ PUSH2 0xF2 JUMPI PUSH2 0xF1 PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x15180 DUP1 EQ PUSH2 0x105 JUMPI PUSH2 0x104 PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH3 0x93A80 DUP1 EQ PUSH2 0x118 JUMPI PUSH2 0x117 PUSH2 0x29F JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x2 PUSH1 0x1 EQ PUSH2 0x12C JUMPI PUSH2 0x12B PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH4 0x3B9ACA00 DUP1 EQ PUSH2 0x140 JUMPI PUSH2 0x13F PUSH2 0x29F JUMP JUMPDEST JUMPDEST PUSH8 0xDE0B6B3A7640000 DUP1 EQ PUSH2 0x158 JUMPI PUSH2 0x157 PUSH2 0x29F JUMP JUMPDEST JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD SWAP1 POP PUSH2 0x169 DUP2 PUSH2 0x302 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x186 JUMPI PUSH2 0x185 PUSH2 0x2FD JUMP JUMPDEST JUMPDEST PUSH1 0x0 PUSH2 0x194 DUP6 DUP3 DUP7 ADD PUSH2 0x15A JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0x1A5 DUP6 DUP3 DUP7 ADD PUSH2 0x15A JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0x1B8 DUP2 PUSH2 0x289 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 ADD SWAP1 POP PUSH2 0x1D3 PUSH1 0x0 DUP4 ADD DUP5 PUSH2 0x1AF JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1E4 DUP3 PUSH2 0x295 JUMP JUMPDEST SWAP2 POP PUSH2 0x1EF DUP4 PUSH2 0x295 JUMP JUMPDEST SWAP3 POP DUP3 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SUB DUP3 GT ISZERO PUSH2 0x224 JUMPI PUSH2 0x223 PUSH2 0x2CE JUMP JUMPDEST JUMPDEST DUP3 DUP3 ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x23A DUP3 PUSH2 0x295 JUMP JUMPDEST SWAP2 POP PUSH2 0x245 DUP4 PUSH2 0x295 JUMP JUMPDEST SWAP3 POP DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x27E JUMPI PUSH2 0x27D PUSH2 0x2CE JUMP JUMPDEST JUMPDEST DUP3 DUP3 MUL SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO ISZERO SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x1 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30B DUP2 PUSH2 0x295 JUMP JUMPDEST DUP2 EQ PUSH2 0x316 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xB7 0x4A PUSH17 0xAC6F78F026E8B665B8AA24BF198C37D53D 0xC5 0xD0 DUP10 PUSH8 0x5FA84E7E87A02B5 PUSH5 0x736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "62:1140:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;745:454;;;;;;;;;;;;;:::i;:::-;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;368:369;;;:::i;:::-;;86:274;;;:::i;:::-;;745:454;814:4;831:16;850:5;831:24;;1097:9;1082:12;:24;;;;:::i;:::-;1074:5;:32;;;;:::i;:::-;1055:15;:51;1051:102;;1137:4;1123:18;;1051:102;1180:11;1173:18;;;745:454;;;;:::o;368:369::-;455:1;442:9;:14;435:22;;;;:::i;:::-;;518:10;505:9;:23;498:31;;;;:::i;:::-;;591:10;580:7;:21;573:29;;;;:::i;:::-;;658:8;648:6;:18;641:26;;;;:::i;:::-;;722:6;711:7;:17;704:25;;;;:::i;:::-;;368:369::o;86:274::-;198:1;189:5;:10;182:18;;;;:::i;:::-;;270:3;260:6;:13;253:21;;;;:::i;:::-;;347:4;336:7;:15;329:23;;;;:::i;:::-;;86:274::o;7:139:1:-;53:5;91:6;78:20;69:29;;107:33;134:5;107:33;:::i;:::-;7:139;;;;:::o;152:474::-;220:6;228;277:2;265:9;256:7;252:23;248:32;245:119;;;283:79;;:::i;:::-;245:119;403:1;428:53;473:7;464:6;453:9;449:22;428:53;:::i;:::-;418:63;;374:117;530:2;556:53;601:7;592:6;581:9;577:22;556:53;:::i;:::-;546:63;;501:118;152:474;;;;;:::o;632:109::-;713:21;728:5;713:21;:::i;:::-;708:3;701:34;632:109;;:::o;747:210::-;834:4;872:2;861:9;857:18;849:26;;885:65;947:1;936:9;932:17;923:6;885:65;:::i;:::-;747:210;;;;:::o;1044:305::-;1084:3;1103:20;1121:1;1103:20;:::i;:::-;1098:25;;1137:20;1155:1;1137:20;:::i;:::-;1132:25;;1291:1;1223:66;1219:74;1216:1;1213:81;1210:107;;;1297:18;;:::i;:::-;1210:107;1341:1;1338;1334:9;1327:16;;1044:305;;;;:::o;1355:348::-;1395:7;1418:20;1436:1;1418:20;:::i;:::-;1413:25;;1452:20;1470:1;1452:20;:::i;:::-;1447:25;;1640:1;1572:66;1568:74;1565:1;1562:81;1557:1;1550:9;1543:17;1539:105;1536:131;;;1647:18;;:::i;:::-;1536:131;1695:1;1692;1688:9;1677:20;;1355:348;;;;:::o;1709:90::-;1743:7;1786:5;1779:13;1772:21;1761:32;;1709:90;;;:::o;1805:77::-;1842:7;1871:5;1860:16;;1805:77;;;:::o;1888:180::-;1936:77;1933:1;1926:88;2033:4;2030:1;2023:15;2057:4;2054:1;2047:15;2074:180;2122:77;2119:1;2112:88;2219:4;2216:1;2209:15;2243:4;2240:1;2233:15;2383:117;2492:1;2489;2482:12;2506:122;2579:24;2597:5;2579:24;:::i;:::-;2572:5;2569:35;2559:63;;2618:1;2615;2608:12;2559:63;2506:122;:::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "169400",
								"executionCost": "214",
								"totalCost": "169614"
							},
							"external": {
								"etherUnitExample()": "218",
								"timeUnitExample()": "259",
								"validate(uint256,uint256)": "infinite"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 62,
									"end": 1202,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220b74a70ac6f78f026e8b665b8aa24bf198c37d53dc5d0896705fa84e7e87a02b564736f6c63430008070033",
									".code": [
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "19730B44"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "24475F4C"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "97E82183"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 62,
											"end": 1202,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "8"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "tag",
											"source": 0,
											"value": "7"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "tag",
											"source": 0,
											"value": "6"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 368,
											"end": 737,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 368,
											"end": 737,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 368,
											"end": 737,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 86,
											"end": 360,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 86,
											"end": 360,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "tag",
											"source": 0,
											"value": "14"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 86,
											"end": 360,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 814,
											"end": 818,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 847,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 850,
											"end": 855,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 831,
											"end": 855,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 831,
											"end": 855,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1097,
											"end": 1106,
											"name": "PUSH",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 1082,
											"end": 1094,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "18"
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "tag",
											"source": 0,
											"value": "17"
										},
										{
											"begin": 1082,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1079,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "20"
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 1074,
											"end": 1106,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1055,
											"end": 1070,
											"name": "TIMESTAMP",
											"source": 0
										},
										{
											"begin": 1055,
											"end": 1106,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 1051,
											"end": 1153,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1051,
											"end": 1153,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1137,
											"end": 1141,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 1123,
											"end": 1141,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 1123,
											"end": 1141,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1051,
											"end": 1153,
											"name": "tag",
											"source": 0,
											"value": "21"
										},
										{
											"begin": 1051,
											"end": 1153,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1180,
											"end": 1191,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1173,
											"end": 1191,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 745,
											"end": 1199,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "tag",
											"source": 0,
											"value": "13"
										},
										{
											"begin": 368,
											"end": 737,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 455,
											"end": 456,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 442,
											"end": 451,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 442,
											"end": 456,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 435,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 435,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "tag",
											"source": 0,
											"value": "24"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 435,
											"end": 457,
											"name": "tag",
											"source": 0,
											"value": "23"
										},
										{
											"begin": 435,
											"end": 457,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 518,
											"end": 528,
											"name": "PUSH",
											"source": 0,
											"value": "3C"
										},
										{
											"begin": 505,
											"end": 514,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 505,
											"end": 528,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 498,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 498,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "tag",
											"source": 0,
											"value": "27"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 498,
											"end": 529,
											"name": "tag",
											"source": 0,
											"value": "26"
										},
										{
											"begin": 498,
											"end": 529,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 591,
											"end": 601,
											"name": "PUSH",
											"source": 0,
											"value": "E10"
										},
										{
											"begin": 580,
											"end": 587,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 580,
											"end": 601,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 573,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 573,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "tag",
											"source": 0,
											"value": "29"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 573,
											"end": 602,
											"name": "tag",
											"source": 0,
											"value": "28"
										},
										{
											"begin": 573,
											"end": 602,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 658,
											"end": 666,
											"name": "PUSH",
											"source": 0,
											"value": "15180"
										},
										{
											"begin": 648,
											"end": 654,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 648,
											"end": 666,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 641,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 641,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 641,
											"end": 667,
											"name": "tag",
											"source": 0,
											"value": "30"
										},
										{
											"begin": 641,
											"end": 667,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 722,
											"end": 728,
											"name": "PUSH",
											"source": 0,
											"value": "93A80"
										},
										{
											"begin": 711,
											"end": 718,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 711,
											"end": 728,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 704,
											"end": 729,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 704,
											"end": 729,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 704,
											"end": 729,
											"name": "tag",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 704,
											"end": 729,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 368,
											"end": 737,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "tag",
											"source": 0,
											"value": "15"
										},
										{
											"begin": 86,
											"end": 360,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 198,
											"end": 199,
											"name": "PUSH",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 189,
											"end": 194,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 189,
											"end": 199,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 182,
											"end": 200,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 182,
											"end": 200,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 182,
											"end": 200,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 182,
											"end": 200,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 270,
											"end": 273,
											"name": "PUSH",
											"source": 0,
											"value": "3B9ACA00"
										},
										{
											"begin": 260,
											"end": 266,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 260,
											"end": 273,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 253,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 253,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "tag",
											"source": 0,
											"value": "38"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 253,
											"end": 274,
											"name": "tag",
											"source": 0,
											"value": "37"
										},
										{
											"begin": 253,
											"end": 274,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 347,
											"end": 351,
											"name": "PUSH",
											"source": 0,
											"value": "DE0B6B3A7640000"
										},
										{
											"begin": 336,
											"end": 343,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 336,
											"end": 351,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 329,
											"end": 352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 329,
											"end": 352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "25"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "tag",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 329,
											"end": 352,
											"name": "tag",
											"source": 0,
											"value": "39"
										},
										{
											"begin": 329,
											"end": 352,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 86,
											"end": 360,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "tag",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 53,
											"end": 58,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 91,
											"end": 97,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 78,
											"end": 98,
											"name": "CALLDATALOAD",
											"source": 1
										},
										{
											"begin": 69,
											"end": 98,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 69,
											"end": 98,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 134,
											"end": 139,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 107,
											"end": 140,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "tag",
											"source": 1,
											"value": "44"
										},
										{
											"begin": 107,
											"end": 140,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 7,
											"end": 146,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 152,
											"end": 626,
											"name": "tag",
											"source": 1,
											"value": "8"
										},
										{
											"begin": 152,
											"end": 626,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 220,
											"end": 226,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 228,
											"end": 234,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 277,
											"end": 279,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 265,
											"end": 274,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 256,
											"end": 263,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 252,
											"end": 275,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 248,
											"end": 280,
											"name": "SLT",
											"source": 1
										},
										{
											"begin": 245,
											"end": 364,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 245,
											"end": 364,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 245,
											"end": 364,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 283,
											"end": 362,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 283,
											"end": 362,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 283,
											"end": 362,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 283,
											"end": 362,
											"name": "tag",
											"source": 1,
											"value": "48"
										},
										{
											"begin": 283,
											"end": 362,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 245,
											"end": 364,
											"name": "tag",
											"source": 1,
											"value": "47"
										},
										{
											"begin": 245,
											"end": 364,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 403,
											"end": 404,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 428,
											"end": 481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 473,
											"end": 480,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 464,
											"end": 470,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 453,
											"end": 462,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 449,
											"end": 471,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 428,
											"end": 481,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 428,
											"end": 481,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 428,
											"end": 481,
											"name": "tag",
											"source": 1,
											"value": "50"
										},
										{
											"begin": 428,
											"end": 481,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 418,
											"end": 481,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 418,
											"end": 481,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 374,
											"end": 491,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 530,
											"end": 532,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 601,
											"end": 608,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 592,
											"end": 598,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 581,
											"end": 590,
											"name": "DUP7",
											"source": 1
										},
										{
											"begin": 577,
											"end": 599,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 556,
											"end": 609,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "42"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "tag",
											"source": 1,
											"value": "51"
										},
										{
											"begin": 556,
											"end": 609,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 546,
											"end": 609,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 546,
											"end": 609,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 501,
											"end": 619,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 152,
											"end": 626,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 632,
											"end": 741,
											"name": "tag",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 632,
											"end": 741,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 713,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 728,
											"end": 733,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 713,
											"end": 734,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 713,
											"end": 734,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 713,
											"end": 734,
											"name": "tag",
											"source": 1,
											"value": "54"
										},
										{
											"begin": 713,
											"end": 734,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 708,
											"end": 711,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 701,
											"end": 735,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 632,
											"end": 741,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 632,
											"end": 741,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 632,
											"end": 741,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 747,
											"end": 957,
											"name": "tag",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 747,
											"end": 957,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 834,
											"end": 838,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 872,
											"end": 874,
											"name": "PUSH",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 861,
											"end": 870,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 857,
											"end": 875,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 849,
											"end": 875,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 849,
											"end": 875,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 885,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 947,
											"end": 948,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 936,
											"end": 945,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 932,
											"end": 949,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 923,
											"end": 929,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 885,
											"end": 950,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "52"
										},
										{
											"begin": 885,
											"end": 950,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 885,
											"end": 950,
											"name": "tag",
											"source": 1,
											"value": "57"
										},
										{
											"begin": 885,
											"end": 950,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 747,
											"end": 957,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 747,
											"end": 957,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 747,
											"end": 957,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 747,
											"end": 957,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 747,
											"end": 957,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "tag",
											"source": 1,
											"value": "20"
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1084,
											"end": 1087,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1121,
											"end": 1122,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "tag",
											"source": 1,
											"value": "61"
										},
										{
											"begin": 1103,
											"end": 1123,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1123,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1098,
											"end": 1123,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1137,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 1155,
											"end": 1156,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1137,
											"end": 1157,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1137,
											"end": 1157,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1137,
											"end": 1157,
											"name": "tag",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 1137,
											"end": 1157,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1132,
											"end": 1157,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1132,
											"end": 1157,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1291,
											"end": 1292,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1223,
											"end": 1289,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1219,
											"end": 1293,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 1216,
											"end": 1217,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1213,
											"end": 1294,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1210,
											"end": 1317,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1210,
											"end": 1317,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1210,
											"end": 1317,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1297,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 1297,
											"end": 1315,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 1297,
											"end": 1315,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1297,
											"end": 1315,
											"name": "tag",
											"source": 1,
											"value": "65"
										},
										{
											"begin": 1297,
											"end": 1315,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1210,
											"end": 1317,
											"name": "tag",
											"source": 1,
											"value": "64"
										},
										{
											"begin": 1210,
											"end": 1317,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1341,
											"end": 1342,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1338,
											"end": 1339,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1334,
											"end": 1343,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 1327,
											"end": 1343,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1327,
											"end": 1343,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1044,
											"end": 1349,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "tag",
											"source": 1,
											"value": "18"
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1395,
											"end": 1402,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1418,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1436,
											"end": 1437,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1418,
											"end": 1438,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1418,
											"end": 1438,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1418,
											"end": 1438,
											"name": "tag",
											"source": 1,
											"value": "68"
										},
										{
											"begin": 1418,
											"end": 1438,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1413,
											"end": 1438,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1413,
											"end": 1438,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1452,
											"end": 1472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 1470,
											"end": 1471,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1452,
											"end": 1472,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1452,
											"end": 1472,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1452,
											"end": 1472,
											"name": "tag",
											"source": 1,
											"value": "69"
										},
										{
											"begin": 1452,
											"end": 1472,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1447,
											"end": 1472,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1447,
											"end": 1472,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1640,
											"end": 1641,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1572,
											"end": 1638,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF"
										},
										{
											"begin": 1568,
											"end": 1642,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 1565,
											"end": 1566,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 1562,
											"end": 1643,
											"name": "GT",
											"source": 1
										},
										{
											"begin": 1557,
											"end": 1558,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1550,
											"end": 1559,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1543,
											"end": 1560,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1539,
											"end": 1644,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 1536,
											"end": 1667,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1536,
											"end": 1667,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 1536,
											"end": 1667,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "tag",
											"source": 1,
											"value": "71"
										},
										{
											"begin": 1647,
											"end": 1665,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1536,
											"end": 1667,
											"name": "tag",
											"source": 1,
											"value": "70"
										},
										{
											"begin": 1536,
											"end": 1667,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1695,
											"end": 1696,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1692,
											"end": 1693,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 1688,
											"end": 1697,
											"name": "MUL",
											"source": 1
										},
										{
											"begin": 1677,
											"end": 1697,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1677,
											"end": 1697,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "SWAP3",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1355,
											"end": 1703,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "tag",
											"source": 1,
											"value": "55"
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1743,
											"end": 1750,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1786,
											"end": 1791,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1779,
											"end": 1792,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1772,
											"end": 1793,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 1761,
											"end": 1793,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1761,
											"end": 1793,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1709,
											"end": 1799,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "tag",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1842,
											"end": 1849,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1871,
											"end": 1876,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 1860,
											"end": 1876,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1860,
											"end": 1876,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 1805,
											"end": 1882,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										},
										{
											"begin": 1888,
											"end": 2068,
											"name": "tag",
											"source": 1,
											"value": "25"
										},
										{
											"begin": 1888,
											"end": 2068,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1936,
											"end": 2013,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 1933,
											"end": 1934,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 1926,
											"end": 2014,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2033,
											"end": 2037,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 2030,
											"end": 2031,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2023,
											"end": 2038,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2057,
											"end": 2061,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 2054,
											"end": 2055,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2047,
											"end": 2062,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2074,
											"end": 2254,
											"name": "tag",
											"source": 1,
											"value": "66"
										},
										{
											"begin": 2074,
											"end": 2254,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2122,
											"end": 2199,
											"name": "PUSH",
											"source": 1,
											"value": "4E487B7100000000000000000000000000000000000000000000000000000000"
										},
										{
											"begin": 2119,
											"end": 2120,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2112,
											"end": 2200,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2219,
											"end": 2223,
											"name": "PUSH",
											"source": 1,
											"value": "11"
										},
										{
											"begin": 2216,
											"end": 2217,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 2209,
											"end": 2224,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 2243,
											"end": 2247,
											"name": "PUSH",
											"source": 1,
											"value": "24"
										},
										{
											"begin": 2240,
											"end": 2241,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2233,
											"end": 2248,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2383,
											"end": 2500,
											"name": "tag",
											"source": 1,
											"value": "49"
										},
										{
											"begin": 2383,
											"end": 2500,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2492,
											"end": 2493,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2489,
											"end": 2490,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2482,
											"end": 2494,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2506,
											"end": 2628,
											"name": "tag",
											"source": 1,
											"value": "45"
										},
										{
											"begin": 2506,
											"end": 2628,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2579,
											"end": 2603,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2597,
											"end": 2602,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2579,
											"end": 2603,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "62"
										},
										{
											"begin": 2579,
											"end": 2603,
											"name": "JUMP",
											"source": 1,
											"value": "[in]"
										},
										{
											"begin": 2579,
											"end": 2603,
											"name": "tag",
											"source": 1,
											"value": "80"
										},
										{
											"begin": 2579,
											"end": 2603,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2572,
											"end": 2577,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 2569,
											"end": 2604,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 2559,
											"end": 2622,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 2559,
											"end": 2622,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 2618,
											"end": 2619,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 2615,
											"end": 2616,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 2608,
											"end": 2620,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 2559,
											"end": 2622,
											"name": "tag",
											"source": 1,
											"value": "81"
										},
										{
											"begin": 2559,
											"end": 2622,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 2506,
											"end": 2628,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 2506,
											"end": 2628,
											"name": "JUMP",
											"source": 1,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"etherUnitExample()": "97e82183",
							"timeUnitExample()": "24475f4c",
							"validate(uint256,uint256)": "19730b44"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"etherUnitExample\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"timeUnitExample\",\"outputs\":[],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"start\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"secondsAfter\",\"type\":\"uint256\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Ep4/example.sol\":\"Example\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Ep4/example.sol\":{\"keccak256\":\"0xa20eacedcedb8fafe5e0ce5d1d881d92bc614f82921c954f8ebf439d6b71d2aa\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b726c70086ae57ae0e01c54703741a6996fec0730c978e1210d5f10605a5c0d6\",\"dweb:/ipfs/QmT4Ay2G8BERXQRgxVWXN6E5gZpMR6zARe3pHKDUViJbmB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"Ep4/example.sol": {
				"ast": {
					"absolutePath": "Ep4/example.sol",
					"exportedSymbols": {
						"Example": [
							88
						]
					},
					"id": 89,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".7",
								".0"
							],
							"nodeType": "PragmaDirective",
							"src": "33:25:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 88,
							"linearizedBaseContracts": [
								88
							],
							"name": "Example",
							"nameLocation": "71:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 22,
										"nodeType": "Block",
										"src": "126:234:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 7,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 5,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "189:5:0",
																"subdenomination": "wei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "32",
																"id": 6,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "198:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_2_by_1",
																	"typeString": "int_const 2"
																},
																"value": "2"
															},
															"src": "189:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 4,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "182:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 8,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "182:18:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 9,
												"nodeType": "ExpressionStatement",
												"src": "182:18:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint32",
																"typeString": "uint32"
															},
															"id": 13,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 11,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "260:6:0",
																"subdenomination": "gwei",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "316539",
																"id": 12,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "270:3:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000_by_1",
																	"typeString": "int_const 1000000000"
																},
																"value": "1e9"
															},
															"src": "260:13:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 10,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "253:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 14,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "253:21:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 15,
												"nodeType": "ExpressionStatement",
												"src": "253:21:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															},
															"id": 19,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 17,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "336:7:0",
																"subdenomination": "ether",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31653138",
																"id": 18,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "347:4:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1000000000000000000_by_1",
																	"typeString": "int_const 1000000000000000000"
																},
																"value": "1e18"
															},
															"src": "336:15:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 16,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "329:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 20,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "329:23:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 21,
												"nodeType": "ExpressionStatement",
												"src": "329:23:0"
											}
										]
									},
									"functionSelector": "97e82183",
									"id": 23,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "etherUnitExample",
									"nameLocation": "95:16:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "111:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "126:0:0"
									},
									"scope": 88,
									"src": "86:274:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 56,
										"nodeType": "Block",
										"src": "407:330:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 29,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 27,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "442:9:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "31",
																"id": 28,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "455:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_1_by_1",
																	"typeString": "int_const 1"
																},
																"value": "1"
															},
															"src": "442:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 26,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "435:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 30,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "435:22:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 31,
												"nodeType": "ExpressionStatement",
												"src": "435:22:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															},
															"id": 35,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 33,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "505:9:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3630",
																"id": 34,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "518:10:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_60_by_1",
																	"typeString": "int_const 60"
																},
																"value": "60"
															},
															"src": "505:23:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 32,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "498:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 36,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "498:31:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 37,
												"nodeType": "ExpressionStatement",
												"src": "498:31:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint16",
																"typeString": "uint16"
															},
															"id": 41,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 39,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "580:7:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3600_by_1",
																	"typeString": "int_const 3600"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3630",
																"id": 40,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "591:10:0",
																"subdenomination": "minutes",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3600_by_1",
																	"typeString": "int_const 3600"
																},
																"value": "60"
															},
															"src": "580:21:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 38,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "573:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 42,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "573:29:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 43,
												"nodeType": "ExpressionStatement",
												"src": "573:29:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 47,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 45,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "648:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "3234",
																"id": 46,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "658:8:0",
																"subdenomination": "hours",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_86400_by_1",
																	"typeString": "int_const 86400"
																},
																"value": "24"
															},
															"src": "648:18:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 44,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "641:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 48,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "641:26:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 49,
												"nodeType": "ExpressionStatement",
												"src": "641:26:0"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint24",
																"typeString": "uint24"
															},
															"id": 53,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"leftExpression": {
																"hexValue": "31",
																"id": 51,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "711:7:0",
																"subdenomination": "weeks",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "1"
															},
															"nodeType": "BinaryOperation",
															"operator": "==",
															"rightExpression": {
																"hexValue": "37",
																"id": 52,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "722:6:0",
																"subdenomination": "days",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_604800_by_1",
																	"typeString": "int_const 604800"
																},
																"value": "7"
															},
															"src": "711:17:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														],
														"id": 50,
														"name": "assert",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967293,
														"src": "704:6:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
															"typeString": "function (bool) pure"
														}
													},
													"id": 54,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"names": [],
													"nodeType": "FunctionCall",
													"src": "704:25:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 55,
												"nodeType": "ExpressionStatement",
												"src": "704:25:0"
											}
										]
									},
									"functionSelector": "24475f4c",
									"id": 57,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "timeUnitExample",
									"nameLocation": "377:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "392:2:0"
									},
									"returnParameters": {
										"id": 25,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "407:0:0"
									},
									"scope": 88,
									"src": "368:369:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "public"
								},
								{
									"body": {
										"id": 86,
										"nodeType": "Block",
										"src": "820:379:0",
										"statements": [
											{
												"assignments": [
													67
												],
												"declarations": [
													{
														"constant": false,
														"id": 67,
														"mutability": "mutable",
														"name": "isValidated",
														"nameLocation": "836:11:0",
														"nodeType": "VariableDeclaration",
														"scope": 86,
														"src": "831:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 66,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "831:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 69,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 68,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "850:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "831:24:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 77,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 70,
															"name": "block",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 4294967292,
															"src": "1055:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_magic_block",
																"typeString": "block"
															}
														},
														"id": 71,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberName": "timestamp",
														"nodeType": "MemberAccess",
														"src": "1055:15:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": ">=",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 76,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 72,
															"name": "start",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 59,
															"src": "1074:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "+",
														"rightExpression": {
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 75,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 73,
																"name": "secondsAfter",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 61,
																"src": "1082:12:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "*",
															"rightExpression": {
																"hexValue": "33",
																"id": 74,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "1097:9:0",
																"subdenomination": "seconds",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_3_by_1",
																	"typeString": "int_const 3"
																},
																"value": "3"
															},
															"src": "1082:24:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"src": "1074:32:0",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "1055:51:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": "區塊的時間戳記至少在3秒以前, 才算有效。\n 注意: 此為範例，真實合約請不要使用block.timestamp來進行檢驗，具有弱點風險。",
												"id": 83,
												"nodeType": "IfStatement",
												"src": "1051:102:0",
												"trueBody": {
													"id": 82,
													"nodeType": "Block",
													"src": "1108:45:0",
													"statements": [
														{
															"expression": {
																"id": 80,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"id": 78,
																	"name": "isValidated",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 67,
																	"src": "1123:11:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 79,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "1137:4:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "1123:18:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 81,
															"nodeType": "ExpressionStatement",
															"src": "1123:18:0"
														}
													]
												}
											},
											{
												"expression": {
													"id": 84,
													"name": "isValidated",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 67,
													"src": "1180:11:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 65,
												"id": 85,
												"nodeType": "Return",
												"src": "1173:18:0"
											}
										]
									},
									"functionSelector": "19730b44",
									"id": 87,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "validate",
									"nameLocation": "754:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 62,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 59,
												"mutability": "mutable",
												"name": "start",
												"nameLocation": "768:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "763:10:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 58,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "763:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 61,
												"mutability": "mutable",
												"name": "secondsAfter",
												"nameLocation": "780:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "775:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 60,
													"name": "uint",
													"nodeType": "ElementaryTypeName",
													"src": "775:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "762:31:0"
									},
									"returnParameters": {
										"id": 65,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 64,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 87,
												"src": "814:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 63,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "814:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "813:6:0"
									},
									"scope": 88,
									"src": "745:454:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 89,
							"src": "62:1140:0",
							"usedErrors": []
						}
					],
					"src": "33:1169:0"
				},
				"id": 0
			}
		}
	}
}