{
	"id": "2049511633e82380fb51ba528eda5270",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.7",
	"solcLongVersion": "0.8.7+commit.e28d00a7",
	"input": {
		"language": "Solidity",
		"sources": {
			"Ep3/example.sol": {
				"content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.7;\r\n\r\n// @title 智能合約範例\r\ncontract Example {\r\n\r\n    function booleanExample() public {\r\n\r\n        /// @dev 尚未檢查過\r\n        bool hasChecked = false;\r\n\r\n        int8 xInt8 = -128;\r\n        uint8 xUint8 = 128;\r\n\r\n        /// @notice 符號「!」代表相反： xxx的相反\r\n        /// @dev 如果還沒被檢查過...\r\n        if (!hasChecked) {\r\n            // ...\r\n        }\r\n\r\n        /// @noticc  符號「!=」代表不等於： xxx不等於xxx\r\n        if (hasChecked != true) {\r\n            // ...\r\n        }\r\n\r\n        /// @notice 符號「==」代表： xxx等於xxx\r\n        /// @dev 如果已經被檢查過\r\n        if (hasChecked == true) {\r\n            // ...\r\n        }\r\n\r\n        /// @notice 「&&」代表著「...且... 」\r\n        /// @dev 如果已經被檢查過「且」已支付\r\n        bool hasPaid = true;\r\n        if (hasChecked && hasPaid) {\r\n            //....\r\n        }\r\n\r\n        /// @notice 「||」代表著「...或... 」\r\n        /// @dev 如果未被檢查過「或」未支付\r\n        if (!hasChecked || !hasPaid) {\r\n            //....\r\n        }\r\n    }\r\n\r\n}"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": false,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			}
		}
	},
	"output": {
		"contracts": {
			"Ep3/example.sol": {
				"Example": {
					"abi": [
						{
							"inputs": [],
							"name": "booleanExample",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"Ep3/example.sol\":90:1172  contract Example {\r... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"Ep3/example.sol\":90:1172  contract Example {\r... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0x610e8bad\n      eq\n      tag_3\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"Ep3/example.sol\":116:1167  function booleanExample() public {\r... */\n    tag_3:\n      tag_4\n      tag_5\n      jump\t// in\n    tag_4:\n      stop\n    tag_5:\n        /* \"Ep3/example.sol\":196:211  bool hasChecked */\n      0x00\n        /* \"Ep3/example.sol\":232:242  int8 xInt8 */\n      dup1\n        /* \"Ep3/example.sol\":245:249  -128 */\n      0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80\n        /* \"Ep3/example.sol\":232:249  int8 xInt8 = -128 */\n      swap1\n      pop\n        /* \"Ep3/example.sol\":260:272  uint8 xUint8 */\n      0x00\n        /* \"Ep3/example.sol\":275:278  128 */\n      0x80\n        /* \"Ep3/example.sol\":260:278  uint8 xUint8 = 128 */\n      swap1\n      pop\n        /* \"Ep3/example.sol\":885:897  bool hasPaid */\n      0x00\n        /* \"Ep3/example.sol\":900:904  true */\n      0x01\n        /* \"Ep3/example.sol\":885:904  bool hasPaid = true */\n      swap1\n      pop\n        /* \"Ep3/example.sol\":919:929  hasChecked */\n      dup4\n        /* \"Ep3/example.sol\":919:940  hasChecked && hasPaid */\n      dup1\n      iszero\n      tag_10\n      jumpi\n      pop\n        /* \"Ep3/example.sol\":933:940  hasPaid */\n      dup1\n        /* \"Ep3/example.sol\":919:940  hasChecked && hasPaid */\n    tag_10:\n        /* \"Ep3/example.sol\":915:974  if (hasChecked && hasPaid) {\r... */\n      pop\n        /* \"Ep3/example.sol\":1104:1114  hasChecked */\n      dup4\n        /* \"Ep3/example.sol\":1103:1114  !hasChecked */\n      iszero\n        /* \"Ep3/example.sol\":1103:1126  !hasChecked || !hasPaid */\n      dup1\n      tag_12\n      jumpi\n      pop\n        /* \"Ep3/example.sol\":1119:1126  hasPaid */\n      dup1\n        /* \"Ep3/example.sol\":1118:1126  !hasPaid */\n      iszero\n        /* \"Ep3/example.sol\":1103:1126  !hasChecked || !hasPaid */\n    tag_12:\n        /* \"Ep3/example.sol\":1099:1160  if (!hasChecked || !hasPaid) {\r... */\n      pop\n        /* \"Ep3/example.sol\":149:1167  {\r... */\n      pop\n      pop\n      pop\n      pop\n        /* \"Ep3/example.sol\":116:1167  function booleanExample() public {\r... */\n      jump\t// out\n\n    auxdata: 0xa26469706673582212204bf43f0146c425fbf2af61af198289352d949cc27001b96d492e6dad48dc101964736f6c63430008070033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b5060b88061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063610e8bad14602d575b600080fd5b60336035565b005b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80905060006080905060006001905083801560705750805b50831580607b575080155b505050505056fea26469706673582212204bf43f0146c425fbf2af61af198289352d949cc27001b96d492e6dad48dc101964736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0xB8 DUP1 PUSH2 0x1F PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x610E8BAD EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 SWAP1 POP PUSH1 0x0 PUSH1 0x80 SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP DUP4 DUP1 ISZERO PUSH1 0x70 JUMPI POP DUP1 JUMPDEST POP DUP4 ISZERO DUP1 PUSH1 0x7B JUMPI POP DUP1 ISZERO JUMPDEST POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B DELEGATECALL EXTCODEHASH ADD CHAINID 0xC4 0x25 0xFB CALLCODE 0xAF PUSH2 0xAF19 DUP3 DUP10 CALLDATALOAD 0x2D SWAP5 SWAP13 0xC2 PUSH17 0x1B96D492E6DAD48DC101964736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "90:1082:0:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@booleanExample_50": {
									"entryPoint": 53,
									"id": 50,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063610e8bad14602d575b600080fd5b60336035565b005b6000807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80905060006080905060006001905083801560705750805b50831580607b575080155b505050505056fea26469706673582212204bf43f0146c425fbf2af61af198289352d949cc27001b96d492e6dad48dc101964736f6c63430008070033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x610E8BAD EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x33 PUSH1 0x35 JUMP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80 SWAP1 POP PUSH1 0x0 PUSH1 0x80 SWAP1 POP PUSH1 0x0 PUSH1 0x1 SWAP1 POP DUP4 DUP1 ISZERO PUSH1 0x70 JUMPI POP DUP1 JUMPDEST POP DUP4 ISZERO DUP1 PUSH1 0x7B JUMPI POP DUP1 ISZERO JUMPDEST POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x4B DELEGATECALL EXTCODEHASH ADD CHAINID 0xC4 0x25 0xFB CALLCODE 0xAF PUSH2 0xAF19 DUP3 DUP10 CALLDATALOAD 0x2D SWAP5 SWAP13 0xC2 PUSH17 0x1B96D492E6DAD48DC101964736F6C6343 STOP ADDMOD SMOD STOP CALLER ",
							"sourceMap": "90:1082:0:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;116:1051;;;:::i;:::-;;;196:15;232:10;245:4;232:17;;260:12;275:3;260:18;;885:12;900:4;885:19;;919:10;:21;;;;;933:7;919:21;915:59;1104:10;1103:11;:23;;;;1119:7;1118:8;1103:23;1099:61;149:1018;;;;116:1051::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "36800",
								"executionCost": "87",
								"totalCost": "36887"
							},
							"external": {
								"booleanExample()": "216"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH",
									"source": 0,
									"value": "80"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH",
									"source": 0,
									"value": "40"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "MSTORE",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "CALLVALUE",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "ISZERO",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH [tag]",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "JUMPI",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "REVERT",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "tag",
									"source": 0,
									"value": "1"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "JUMPDEST",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "POP",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH #[$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "DUP1",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH [$]",
									"source": 0,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "CODECOPY",
									"source": 0
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "PUSH",
									"source": 0,
									"value": "0"
								},
								{
									"begin": 90,
									"end": 1172,
									"name": "RETURN",
									"source": 0
								}
							],
							".data": {
								"0": {
									".auxdata": "a26469706673582212204bf43f0146c425fbf2af61af198289352d949cc27001b96d492e6dad48dc101964736f6c63430008070033",
									".code": [
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "CALLVALUE",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "tag",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "LT",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "CALLDATALOAD",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "E0"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "SHR",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "610E8BAD"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "tag",
											"source": 0,
											"value": "2"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 90,
											"end": 1172,
											"name": "REVERT",
											"source": 0
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "tag",
											"source": 0,
											"value": "3"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "JUMP",
											"source": 0,
											"value": "[in]"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "STOP",
											"source": 0
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 196,
											"end": 211,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 232,
											"end": 242,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 245,
											"end": 249,
											"name": "PUSH",
											"source": 0,
											"value": "FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF80"
										},
										{
											"begin": 232,
											"end": 249,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 232,
											"end": 249,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 260,
											"end": 272,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 275,
											"end": 278,
											"name": "PUSH",
											"source": 0,
											"value": "80"
										},
										{
											"begin": 260,
											"end": 278,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 260,
											"end": 278,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 885,
											"end": 897,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 900,
											"end": 904,
											"name": "PUSH",
											"source": 0,
											"value": "1"
										},
										{
											"begin": 885,
											"end": 904,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 885,
											"end": 904,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 919,
											"end": 929,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 919,
											"end": 940,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 940,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 919,
											"end": 940,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 919,
											"end": 940,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 919,
											"end": 940,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 933,
											"end": 940,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 919,
											"end": 940,
											"name": "tag",
											"source": 0,
											"value": "10"
										},
										{
											"begin": 919,
											"end": 940,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 915,
											"end": 974,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1104,
											"end": 1114,
											"name": "DUP4",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1114,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 1119,
											"end": 1126,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 1118,
											"end": 1126,
											"name": "ISZERO",
											"source": 0
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "tag",
											"source": 0,
											"value": "12"
										},
										{
											"begin": 1103,
											"end": 1126,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1099,
											"end": 1160,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 149,
											"end": 1167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 149,
											"end": 1167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 149,
											"end": 1167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 149,
											"end": 1167,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 116,
											"end": 1167,
											"name": "JUMP",
											"source": 0,
											"value": "[out]"
										}
									]
								}
							}
						},
						"methodIdentifiers": {
							"booleanExample()": "610e8bad"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"booleanExample\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"Ep3/example.sol\":\"Example\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"Ep3/example.sol\":{\"keccak256\":\"0x74cec9ff7f3b1eb079cf27d7ff6bdc9feda06fb208edfc02af5858acccf94dab\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4621e28068bf7ae041084a5320b07d3d2d09f39a6cd03bd162a9e2e62315c7b4\",\"dweb:/ipfs/Qmd5kjoVur8PspXLehqfv354KgeNvTMWzq3ELW6im6Pdup\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"errors": [
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> Ep3/example.sol:12:9:\n   |\n12 |         int8 xInt8 = -128;\n   |         ^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 242,
					"file": "Ep3/example.sol",
					"start": 232
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2072",
				"formattedMessage": "Warning: Unused local variable.\n  --> Ep3/example.sol:13:9:\n   |\n13 |         uint8 xUint8 = 128;\n   |         ^^^^^^^^^^^^\n\n",
				"message": "Unused local variable.",
				"severity": "warning",
				"sourceLocation": {
					"end": 272,
					"file": "Ep3/example.sol",
					"start": 260
				},
				"type": "Warning"
			},
			{
				"component": "general",
				"errorCode": "2018",
				"formattedMessage": "Warning: Function state mutability can be restricted to pure\n --> Ep3/example.sol:7:5:\n  |\n7 |     function booleanExample() public {\n  |     ^ (Relevant source part starts here and spans across multiple lines).\n\n",
				"message": "Function state mutability can be restricted to pure",
				"severity": "warning",
				"sourceLocation": {
					"end": 1167,
					"file": "Ep3/example.sol",
					"start": 116
				},
				"type": "Warning"
			}
		],
		"sources": {
			"Ep3/example.sol": {
				"ast": {
					"absolutePath": "Ep3/example.sol",
					"exportedSymbols": {
						"Example": [
							51
						]
					},
					"id": 52,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".7"
							],
							"nodeType": "PragmaDirective",
							"src": "33:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 51,
							"linearizedBaseContracts": [
								51
							],
							"name": "Example",
							"nameLocation": "99:7:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 49,
										"nodeType": "Block",
										"src": "149:1018:0",
										"statements": [
											{
												"assignments": [
													6
												],
												"declarations": [
													{
														"constant": false,
														"id": 6,
														"mutability": "mutable",
														"name": "hasChecked",
														"nameLocation": "201:10:0",
														"nodeType": "VariableDeclaration",
														"scope": 49,
														"src": "196:15:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 5,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "196:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"documentation": "@dev 尚未檢查過",
												"id": 8,
												"initialValue": {
													"hexValue": "66616c7365",
													"id": 7,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "214:5:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "false"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "196:23:0"
											},
											{
												"assignments": [
													10
												],
												"declarations": [
													{
														"constant": false,
														"id": 10,
														"mutability": "mutable",
														"name": "xInt8",
														"nameLocation": "237:5:0",
														"nodeType": "VariableDeclaration",
														"scope": 49,
														"src": "232:10:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_int8",
															"typeString": "int8"
														},
														"typeName": {
															"id": 9,
															"name": "int8",
															"nodeType": "ElementaryTypeName",
															"src": "232:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_int8",
																"typeString": "int8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 13,
												"initialValue": {
													"id": 12,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "-",
													"prefix": true,
													"src": "245:4:0",
													"subExpression": {
														"hexValue": "313238",
														"id": 11,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "246:3:0",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_128_by_1",
															"typeString": "int_const 128"
														},
														"value": "128"
													},
													"typeDescriptions": {
														"typeIdentifier": "t_rational_minus_128_by_1",
														"typeString": "int_const -128"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "232:17:0"
											},
											{
												"assignments": [
													15
												],
												"declarations": [
													{
														"constant": false,
														"id": 15,
														"mutability": "mutable",
														"name": "xUint8",
														"nameLocation": "266:6:0",
														"nodeType": "VariableDeclaration",
														"scope": 49,
														"src": "260:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint8",
															"typeString": "uint8"
														},
														"typeName": {
															"id": 14,
															"name": "uint8",
															"nodeType": "ElementaryTypeName",
															"src": "260:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_uint8",
																"typeString": "uint8"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 17,
												"initialValue": {
													"hexValue": "313238",
													"id": 16,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "275:3:0",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_128_by_1",
														"typeString": "int_const 128"
													},
													"value": "128"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "260:18:0"
											},
											{
												"condition": {
													"id": 19,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "404:11:0",
													"subExpression": {
														"id": 18,
														"name": "hasChecked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "405:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": "@notice 符號「!」代表相反： xxx的相反\n @dev 如果還沒被檢查過...",
												"id": 21,
												"nodeType": "IfStatement",
												"src": "400:49:0",
												"trueBody": {
													"id": 20,
													"nodeType": "Block",
													"src": "417:32:0",
													"statements": []
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 24,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 22,
														"name": "hasChecked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "536:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 23,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "550:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "536:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": "@noticc  符號「!=」代表不等於： xxx不等於xxx",
												"id": 26,
												"nodeType": "IfStatement",
												"src": "532:56:0",
												"trueBody": {
													"id": 25,
													"nodeType": "Block",
													"src": "556:32:0",
													"statements": []
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 29,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 27,
														"name": "hasChecked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "705:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"hexValue": "74727565",
														"id": 28,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "719:4:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "705:18:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": "@notice 符號「==」代表： xxx等於xxx\n @dev 如果已經被檢查過",
												"id": 31,
												"nodeType": "IfStatement",
												"src": "701:56:0",
												"trueBody": {
													"id": 30,
													"nodeType": "Block",
													"src": "725:32:0",
													"statements": []
												}
											},
											{
												"assignments": [
													34
												],
												"declarations": [
													{
														"constant": false,
														"id": 34,
														"mutability": "mutable",
														"name": "hasPaid",
														"nameLocation": "890:7:0",
														"nodeType": "VariableDeclaration",
														"scope": 49,
														"src": "885:12:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 33,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "885:4:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"documentation": "@notice 「&&」代表著「...且... 」\n @dev 如果已經被檢查過「且」已支付",
												"id": 36,
												"initialValue": {
													"hexValue": "74727565",
													"id": 35,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "bool",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "900:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"value": "true"
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "885:19:0"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 39,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 37,
														"name": "hasChecked",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 6,
														"src": "919:10:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 38,
														"name": "hasPaid",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 34,
														"src": "933:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "919:21:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 41,
												"nodeType": "IfStatement",
												"src": "915:59:0",
												"trueBody": {
													"id": 40,
													"nodeType": "Block",
													"src": "942:32:0",
													"statements": []
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 43,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "1103:11:0",
														"subExpression": {
															"id": 42,
															"name": "hasChecked",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 6,
															"src": "1104:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"id": 45,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "1118:8:0",
														"subExpression": {
															"id": 44,
															"name": "hasPaid",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 34,
															"src": "1119:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "1103:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"documentation": "@notice 「||」代表著「...或... 」\n @dev 如果未被檢查過「或」未支付",
												"id": 48,
												"nodeType": "IfStatement",
												"src": "1099:61:0",
												"trueBody": {
													"id": 47,
													"nodeType": "Block",
													"src": "1128:32:0",
													"statements": []
												}
											}
										]
									},
									"functionSelector": "610e8bad",
									"id": 50,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "booleanExample",
									"nameLocation": "125:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 2,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "139:2:0"
									},
									"returnParameters": {
										"id": 3,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "149:0:0"
									},
									"scope": 51,
									"src": "116:1051:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "public"
								}
							],
							"scope": 52,
							"src": "90:1082:0",
							"usedErrors": []
						}
					],
					"src": "33:1139:0"
				},
				"id": 0
			}
		}
	}
}